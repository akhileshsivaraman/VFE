library(phytools)
data("anoletree")
View(anoletree)
plotTree(anoletree)
svl <- read.csv("http://www.phytools.org/eqg2015/data/svl.csv", row.names = T)
svl <- read.csv("http://www.phytools.org/eqg2015/data/svl.csv", row.names = 1)
View(svl)
svl <- as.matrix(svl)[,1]
names(svl)
# estimate ancestral states
fit <- fastAnc(anoletree, svl, vars = T, CI = T)
tree <- geiger::treedata(anoletree, svl)
# estimate ancestral states
fit <- fastAnc(anoletree, svl, vars = T, CI = T)
# estimate ancestral states
svl1 <- svl[1:82]
fit <- fastAnc(anoletree, svl1, vars = T, CI = T)
library(ape)
library(phytools)
install.packages("diversitree")
library(diversitree)
data("anoletree")
x <- getStates(anoletree, "tips")
View(anoletree)
anoletree[["maps"]]
anoletree[["node.states"]]
x
rmtree(anoletree)
tree <- anoletree
rm(anoletree)
tree
plot(tree,
type = "fan")
plot(tree,
type = "fan", fsize = 0.8)
plot(tree,
type = "fan", fsize = 0.8, ftype = "i")
plot(tree, type = "fan", fsize = 0.8, ftype = "i")
par(mar=c(0,0,0,0))
plot(tree, type = "fan", fsize = 0.8, ftype = "i")
plot.phylo(tree, "cladogram")
plot.phylo(tree, "phylogram")
plotTree(tree, type = "fan", fsize = 0.8, ftype = i)
plotTree(tree, type = "fan", fsize = 0.8, ftype = "i")
plotTree(tree)
plotTree(tree, type = "fan", fsize = 1, ftype = "i")
plotTree(tree)
cols <- setNames(palette()[1:length(unique(x))], sort(unique(x)))
tiplabels(pie = to.matrix(x, sort(unique(x))), piecol = cols, cex=0.3)
plot.phylo(tree, offset = 0.2)
plot.phylo(tree, label.offset = 0.4)
plot.phylo(tree, label.offset = 0.4)
cols <- setNames(palette()[1:length(unique(x))], sort(unique(x)))
tiplabels(pie = to.matrix(x, sort(unique(x))), piecol = cols, cex=0.3)
plot.phylo(tree, label.offset = 0.4, cex = 0.8)
cols <- setNames(palette()[1:length(unique(x))], sort(unique(x)))
tiplabels(pie = to.matrix(x, sort(unique(x))), piecol = cols, cex=0.3)
add.simmap.legend(colors = cols, prompt = F,
x = 0.9*par()$usr[1],
y = -max(nodeHeights(tree)), fsize = 0.8)
add.simmap.legend(colors = cols)
fitER <- ace(x, tree, model = "ER", type = "discrete")
fitER
round(fitER$lik.anc, 3)
plot.phylo(tree, label.offset = 0.4, cex = 0.8)
nodelabels(node = 1:tree$Nnode+Ntip(tree),
pie = fitER$lik.anc, piecol = cols, cex = 0.5)
tiplabels(pie = to.matrix(x, sort(unique(x))), piecol = cols, cex = 0.3)
par(mfrow = c(1,1))
plot.phylo(tree, label.offset = 0.4, cex = 0.8)
par(mfrow = c(0,1))
par(mfrow = c(1,1))
plot.phylo(tree, label.offset = 0.4, cex = 0.8)
nodelabels(node = 1:tree$Nnode+Ntip(tree),
pie = fitER$lik.anc, piecol = cols, cex = 0.5)
tiplabels(pie = to.matrix(x, sort(unique(x))), piecol = cols, cex = 0.3)
plot.phylo(tree, label.offset = 0.4, cex = 0.8, type = "cladogram")
plot.phylo(tree, label.offset = 0.4, cex = 0.8, type = "cladogram", use.edge.length = F)
nodelabels(node = 1:tree$Nnode+Ntip(tree),
pie = fitER$lik.anc, piecol = cols, cex = 0.5)
tiplabels(pie = to.matrix(x, sort(unique(x))), piecol = cols, cex = 0.3)
par(mfcol = c(1,1))
plot.phylo(tree, label.offset = 0.4, cex = 0.8, type = "cladogram", use.edge.length = F)
nodelabels(node = 1:tree$Nnode+Ntip(tree),
pie = fitER$lik.anc, piecol = cols, cex = 0.5)
tiplabels(pie = to.matrix(x, sort(unique(x))), piecol = cols, cex = 0.3)
# MCMC model
mtree <- make.simmap(tree, x, model = "ER")
plot.phylo(mtree, type = "radial")
plot.phylo(mtree, type = "phylogram")
plot.phylo(mtree, type = "phylogram", cols)
plot.phylo(mtree, edge.color = cols, type = "phylogram")
mtrees <- make.simmap(tree, x, model = "ER", nsim = 100)
par(mfrow = c(10,10))
null <- sapply(mtrees, plot, colours = cols)
null <- sapply(mtrees, plot, col = cols)
pd <- summary(mtrees, plot = F)
pd
plot(pd, fsize = 0.6, ftype = "i")
par(mfrow = c(1,1))
pd <- summary(mtrees, plot = F)
plot(pd, fsize = 0.6, ftype = "i")
plot(mtrees[[1]], col = cols)
nodelabels(pie = pd$ace, piecol = cols, cex = 0.5)
library(phytools)
source("sim.history.R")
library(ape)
tree <- rbdtree(b=1, d=0, Tmax = log(12.5))
q <- matrix(c(-1,1,1,-1),2,2)
View(q)
View(tree)
mtree <- sim.history(tree, q)
plotSimmap(mtree)
View(mtree)
View(tree)
View(mtree)
library(auteur)
install.packages("~/Downloads/auteur_0.11.0612.tar", repos = NULL)
install.packages("Imperial/UEBS/Papers/auteur/", repos = NULL, type = "source")
# install.packages("Imperial/UEBS/Papers/auteur/", repos = NULL, type = "source")
library(auteur)
n = 24
while (1) {
phy=prunelastsplit(birthdeath.tree(b=1,d=0,taxa.stop=n+1))
phy$tip.label=paste("sp",1:n,sep="")
rphy=reorder(phy,"pruningwise")
# find an internal edge
anc=get.desc.of.node(Ntip(phy)+1,phy)
branches=phy$edge[,2]
branches=branches[branches>Ntip(phy) & branches!=anc]
branch=branches[sample(1:length(branches),1)]
desc=get.descendants.of.node(branch,phy)
if(length(desc)>=4) break()
}
View(phy)
rphy = phy
rphy$edge.length[match(desc,phy$edge[,2])]=phy$edge.length[match(desc,phy$edge[,2])]*64
e=numeric(nrow(phy$edge))
e[match(c(branch,desc),phy$edge[,2])]=1
cols=c("red","gray")
dev.new()
plot(phy,edge.col=ifelse(e==1,cols[1],cols[2]), edge.width=2)
mtext("expected pattern of rates")
#############
## simulate data on the 'rate-shifted' tree
dat=rTraitCont(phy=rphy, model="BM", sigma=sqrt(0.1))
## run two short reversible-jump Markov chains
r=paste(sample(letters,9,replace=TRUE),collapse="")
lapply(1:2, function(x) rjmcmc.bm(phy=phy, dat=dat, ngen=10000, sample.freq=10, prob.mergesplit=0.1, simplestart=TRUE, prop.width=1, fileBase=paste(r,x,sep=".")))
# collect directories
dirs=dir("./",pattern=paste("BM",r,sep=".")) # rjmcmc results have been stored in documents (the wd in this case)
pool.rjmcmcsamples(base.dirs=dirs, lab=r)
# view rda file content
load(paste(paste(r,"combined.rjmcmc",sep="."),paste(r,"posteriorsamples.rda",sep="."),sep="/"))
print(head(posteriorsamples$rates))
print(head(posteriorsamples$rate.shifts))
## plot Markov sampled rates
dev.new()
shifts.plot(phy=phy, base.dir=paste(r,"combined.rjmcmc",sep="."), burnin=0.5, legend=TRUE, edge.width=2)
## plot Markov sampled rates
plot.new()
shifts.plot(phy=phy, base.dir=paste(r,"combined.rjmcmc",sep="."), burnin=0.5, legend=TRUE, edge.width=2)
# clean-up: unlink those directories
unlink(dir(pattern=paste(r)),recursive=TRUE)
##### auteur example #####
# install.packages("Imperial/UEBS/Papers/auteur/", repos = NULL, type = "source")
library(auteur)
n = 24
while (1) {
phy=prunelastsplit(birthdeath.tree(b=1,d=0,taxa.stop=n+1))
phy$tip.label=paste("sp",1:n,sep="")
rphy=reorder(phy,"pruningwise")
# find an internal edge
anc=get.desc.of.node(Ntip(phy)+1,phy)
branches=phy$edge[,2]
branches=branches[branches>Ntip(phy) & branches!=anc]
branch=branches[sample(1:length(branches),1)]
desc=get.descendants.of.node(branch,phy)
if(length(desc)>=4) break()
}
rphy = phy
rphy$edge.length[match(desc,phy$edge[,2])]=phy$edge.length[match(desc,phy$edge[,2])]*64
e=numeric(nrow(phy$edge))
e[match(c(branch,desc),phy$edge[,2])]=1
cols=c("red","gray")
plot(phy,edge.col=ifelse(e==1,cols[1],cols[2]), edge.width=2)
mtext("expected pattern of rates")
## simulate data on the 'rate-shifted' tree
dat=rTraitCont(phy=rphy, model="BM", sigma=sqrt(0.1)) # use to simulate PCA data
## run two short reversible-jump Markov chains
r=paste(sample(letters,9,replace=TRUE),collapse="")
lapply(1:2, function(x) rjmcmc.bm(phy=phy, dat=dat, ngen=10000, sample.freq=10, prob.mergesplit=0.1, simplestart=TRUE, prop.width=1, fileBase=paste(r,x,sep=".")))
pool.rjmcmcsamples(base.dirs=dirs, lab=r)
# collect directories
dirs=dir("./",pattern=paste("BM",r,sep=".")) # rjmcmc results have been stored in documents (the wd in this case)
pool.rjmcmcsamples(base.dirs=dirs, lab=r)
# view rda file content
load(paste(paste(r,"combined.rjmcmc",sep="."),paste(r,"posteriorsamples.rda",sep="."),sep="/"))
print(head(posteriorsamples$rates))
print(head(posteriorsamples$rate.shifts))
## plot Markov sampled rates
plot.new()
shifts.plot(phy=phy, base.dir=paste(r,"combined.rjmcmc",sep="."), burnin=0.5, legend=TRUE, edge.width=2)
geiger::rjmcmc.bm(phy=phy, dat=dat, ngen=10000, sample.freq=10, prob.mergesplit=0.1, simplestart=TRUE, prop.width=1, fileBase=paste(r,x,sep="."))
geiger::rjmcmc.bm(phy=phy, dat=dat, ngen=10000, sample.freq=10, prob.mergesplit=0.1, simplestart=TRUE, prop.width=1)
res <- load.rjmcmc(x = "jump-relaxedBM.result/")
shifts.plot(phy = phy, base.dir = "jump-relaxedBM.result/", legend = T)
paste(r,"combined.rjmcmc",sep=".")
shifts.plot(phy = phy, base.dir = "dvzqemktl.combined.rjmcmc", legend = T)
shifts.plot(phy = phy, base.dir = "jump-relaxedBM.result", legend = T)
plot(x = res, par = "shifts", burnin = 0.25, legend = T)
res1 <- load.rjmcmc("dvzqemktl.combined.rjmcmc/")
res1 <- load.rjmcmc("BM.dvzqemktl.1.parameters/")
plot(x = res, par = "jumps", burnin = 0.25, legend = T)
# clean-up: unlink those directories
unlink(dir(pattern=paste(r)),recursive=TRUE)
log <- res$log
View(log)
##### rjmcmcm.bm example #####
# https://rdrr.io/cran/geiger/man/rjmcmc.bm.html
library(phytools)
library(geiger)
library(ape)
library(coda)
setwd("~/Documents/Imperial/UEBS/Code")
phy <- ladderize(sim.bdtree(n=200), right = F)
r <- paste(sample(letters, 9, replace = T), collapse = "")
defpar <- par(no.readonly = T)
tmp <- ex.jumpsimulator(phy, jumps = 10)
dat <- tmp$dat
hist <- tmp$hist
ex.traitgram(phy, hist, alpha = 0) # plot history of trait change
outdir <- paste("jump-BM", r, sep = ".")
ps <- load.rjmcmc(outdir)
ps <- load.rjmcmc("relaxedBM.result/")
plot(x = ps, par = "shifts", burnin = 0.25, legend = T, show.tip = T)
a <- plot(x = ps, par = "shifts", burnin = 0.25, legend = T, show.tip = T)
View(a)
